package proyectomagico;

import analizador.Lexer;    
import analizador.Parser;
import analizador.sym;     
import java.io.StringReader;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import javax.swing.JTextArea;

public class Principal extends javax.swing.JFrame {

  // Método auxiliar para formatear la salida léxica
private void reportarLexico(LinkedList<Symbol> tokens, javax.swing.JTextArea salida) {
   StringBuilder sb = new StringBuilder();
    
    // Encabezados con anchos fijos
    sb.append(String.format("%-25s %-25s\n", "LÍNEA / TOKEN", "SÍMBOLO / LEXEMA"));
    sb.append("----------------------------------------------------------\n");

    int lineaActual = -1; 
    int contadorTokens = 0;

    for (Symbol token : tokens) {
        // Asumiendo que estos métodos existen en Lexer.java o sym.java:
        String tipoToken = analizador.sym.getTipoToken(token.sym);
        String lexema = (token.value != null) ? token.value.toString() : analizador.sym.getSimbolo(token.sym);
        
        String etiquetaLinea;
        
        // Determina si es una nueva línea para imprimir el número de línea
        if (token.left != lineaActual) {
            lineaActual = token.left;
            etiquetaLinea = "LÍNEA " + (token.left + 1);
        } else {
            // Si es la misma línea, deja la columna vacía para alinear mejor
            etiquetaLinea = ""; 
        }
        
        // Imprime el token usando anchos fijos. Concatenamos el tipo de token a la etiqueta de línea
        sb.append(String.format("%-25s\n", 
            etiquetaLinea + " <" + tipoToken + ">", 
            lexema));
        
        contadorTokens++;
    }
    
    if(contadorTokens == 0){
        sb.append("No se encontraron tokens. Verifique la Entrada.");
    }
    
    salida.setText(sb.toString());
}  
    
    
    public Principal() {
        initComponents();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultadoLexico = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        btnAnalizar = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtResultadoSintactico = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtResultadoLexico.setEditable(false);
        txtResultadoLexico.setColumns(20);
        txtResultadoLexico.setRows(5);
        txtResultadoLexico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(txtResultadoLexico);

        txtCodigo.setColumns(20);
        txtCodigo.setRows(5);
        txtCodigo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setViewportView(txtCodigo);

        btnAnalizar.setText("Analizar");
        btnAnalizar.setBorder(null);
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtResultadoSintactico.setEditable(false);
        txtResultadoSintactico.setColumns(20);
        txtResultadoSintactico.setRows(5);
        txtResultadoSintactico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane3.setViewportView(txtResultadoSintactico);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(204, 204, 204)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        txtResultadoLexico.setText("");      // Limpia el área INFERIOR (que usamos para Sintáctico)
    txtResultadoSintactico.setText("");  // Limpia el área SUPERIOR DERECHA (que usamos para Léxico)

    String codigoFuente = txtCodigo.getText();
    
    try {
        // --- FASE 1: ANÁLISIS LÉXICO ---
        LinkedList<Symbol> tokens = new LinkedList<>();
        StringReader readerReporte = new StringReader(codigoFuente);
        Lexer lexerReporte = new Lexer(readerReporte);
        
        Symbol token;
        boolean errorLexico = false;
        
        // Escanear todos los tokens y verificar errores
        while ((token = lexerReporte.next_token()) != null && token.sym != sym.EOF) {
            if (token.sym == sym.ERROR_LEXICO) { 
                // Reporta el error LÉXICO al área INFERIOR (txtResultadoLexico)
                txtResultadoLexico.setText("Análisis detenido: Error Léxico en línea " + 
                                           (token.left + 1) + ". Símbolo no reconocido: " + token.value);
                errorLexico = true; 
                break;
            }
            tokens.add(token);
        }

        // Si no hay errores léxicos, proceder al reporte y al análisis sintáctico
        if (!errorLexico) {
            
            // 1.1 Reportar léxico en el JTextArea: ¡USAR EL ÁREA SUPERIOR DERECHA!
            // La salida de tokens va a txtResultadoSintactico (área superior derecha)
            reportarLexico(tokens, txtResultadoSintactico); 
            
            // --- FASE 2: ANÁLISIS SINTÁCTICO ---
            
            // 2.1 Crear un NUEVO Lexer para el Parser
            StringReader readerSintactico = new StringReader(codigoFuente);
            analizador.Lexer lexerParser = new analizador.Lexer(readerSintactico);
            
            // 2.2 Inicializar el Parser
            Parser parser = new Parser(lexerParser); 
            
            // 2.3 Configurar la salida del parser: ¡USAR EL ÁREA INFERIOR!
            // El reporte de sintaxis va a txtResultadoLexico (área inferior)
            parser.setSalida(txtResultadoLexico); 

            // 2.4 Ejecutar el análisis sintáctico
            parser.parse();
            
            // 2.5 Mostrar mensaje de éxito si el parser no reportó errores
            if (txtResultadoLexico.getText().isEmpty()) {
                // Si el parser no escribió nada, el análisis fue correcto.
                txtResultadoLexico.setText("Análisis realizado correctamente.");
            }
        }

    } catch (Exception e) {
        // Captura errores irrecuperables
        txtResultadoLexico.append("\n\nError de Ejecución del Analizador (IRRECUPERABLE): " + e.getMessage());
        e.printStackTrace();
    }

    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    txtCodigo.setText("");
    txtResultadoSintactico.setText("");      // Salida Léxica
    txtResultadoLexico.setText("");  // Salida Sintáctica
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAnalizar;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtCodigo;
    private javax.swing.JTextArea txtResultadoLexico;
    private javax.swing.JTextArea txtResultadoSintactico;
    // End of variables declaration//GEN-END:variables
}
