
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 01 23:25:57 CST 2025
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 01 23:25:57 CST 2025
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\004" +
    "\002\000\002\004\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\006\000\002\003\006\000\002" +
    "\003\007\000\002\003\007\000\002\003\005\000\002\003" +
    "\011\000\002\003\006\000\002\005\011\000\002\017\002" +
    "\000\002\017\003\000\002\015\003\000\002\015\005\000" +
    "\002\006\007\000\002\007\006\000\002\007\010\000\002" +
    "\010\010\000\002\010\011\000\002\020\002\000\002\020" +
    "\005\000\002\011\010\000\002\011\011\000\002\013\005" +
    "\000\002\012\012\000\002\012\010\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\030\002\uffff\004\007\005\010\007\004\011" +
    "\024\020\017\021\011\022\015\023\025\024\006\053\012" +
    "\001\002\000\012\037\036\053\035\054\034\055\037\001" +
    "\002\000\004\002\000\001\002\000\004\053\155\001\002" +
    "\000\004\053\143\001\002\000\012\037\036\053\035\054" +
    "\034\055\037\001\002\000\004\053\131\001\002\000\004" +
    "\046\113\001\002\000\032\002\ufffc\004\ufffc\005\ufffc\007" +
    "\ufffc\011\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\036\ufffc\053\ufffc\001\002\000\004\002\112\001\002\000" +
    "\004\053\103\001\002\000\032\002\ufffd\004\ufffd\005\ufffd" +
    "\007\ufffd\011\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\036\ufffd\053\ufffd\001\002\000\004\053\100\001\002" +
    "\000\032\002\uffff\004\007\005\010\007\004\011\024\020" +
    "\017\021\011\022\015\023\025\024\006\036\uffff\053\012" +
    "\001\002\000\032\002\ufff9\004\ufff9\005\ufff9\007\ufff9\011" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\036\ufff9" +
    "\053\ufff9\001\002\000\032\002\ufffa\004\ufffa\005\ufffa\007" +
    "\ufffa\011\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\036\ufffa\053\ufffa\001\002\000\032\002\ufffb\004\ufffb\005" +
    "\ufffb\007\ufffb\011\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\036\ufffb\053\ufffb\001\002\000\004\053\031\001" +
    "\002\000\004\042\027\001\002\000\032\002\ufff8\004\ufff8" +
    "\005\ufff8\007\ufff8\011\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\036\ufff8\053\ufff8\001\002\000\004\044\030" +
    "\001\002\000\032\002\ufff3\004\ufff3\005\ufff3\007\ufff3\011" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\036\ufff3" +
    "\053\ufff3\001\002\000\006\026\033\046\032\001\002\000" +
    "\012\037\036\053\035\054\034\055\037\001\002\000\012" +
    "\037\036\053\035\054\034\055\037\001\002\000\054\010" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\025\uffde\031\uffde\032\uffde\033\uffde\034\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\045\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\001\002\000\054\010\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\025\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\045" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\012" +
    "\037\036\053\035\054\034\055\037\001\002\000\054\010" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\025\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\001\002\000\026\012\047\013\041\014\052\015" +
    "\051\016\043\043\044\047\046\050\042\051\045\052\050" +
    "\001\002\000\012\037\036\053\035\054\034\055\037\001" +
    "\002\000\012\037\036\053\035\054\034\055\037\001\002" +
    "\000\012\037\036\053\035\054\034\055\037\001\002\000" +
    "\004\035\061\001\002\000\012\037\036\053\035\054\034" +
    "\055\037\001\002\000\012\037\036\053\035\054\034\055" +
    "\037\001\002\000\012\037\036\053\035\054\034\055\037" +
    "\001\002\000\012\037\036\053\035\054\034\055\037\001" +
    "\002\000\012\037\036\053\035\054\034\055\037\001\002" +
    "\000\012\037\036\053\035\054\034\055\037\001\002\000" +
    "\054\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\025\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\001\002\000\054\010\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\025\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\001\002" +
    "\000\054\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\025\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\001\002\000\054\010\uffd7\012\uffd7" +
    "\013\uffd7\014\052\015\051\016\043\017\uffd7\025\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\045\uffd7\047\uffd7\050\uffd7\051\045\052\050\001" +
    "\002\000\054\010\uffdb\012\uffdb\013\uffdb\014\052\015\051" +
    "\016\043\017\uffdb\025\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\047\uffdb" +
    "\050\uffdb\051\045\052\050\001\002\000\054\010\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\025\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\001\002\000\030\004\007\005\010\007\004\011\024\020" +
    "\017\021\011\022\015\023\025\024\006\036\uffff\053\012" +
    "\001\002\000\032\002\uffe0\004\uffe0\005\uffe0\007\uffe0\011" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\036\uffe0" +
    "\053\uffe0\001\002\000\004\036\064\001\002\000\032\002" +
    "\uffe2\004\uffe2\005\uffe2\007\uffe2\011\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\036\uffe2\053\uffe2\001\002\000" +
    "\054\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\025\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\045\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\001\002\000\054\010\uffda\012\uffda\013" +
    "\uffda\014\052\015\051\016\043\017\uffda\025\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\045\uffda\047\uffda\050\uffda\051\045\052\050\001\002" +
    "\000\054\010\uffd6\012\uffd6\013\uffd6\014\052\015\051\016" +
    "\043\017\uffd6\025\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045\uffd6\047\uffd6\050" +
    "\uffd6\051\045\052\050\001\002\000\026\012\047\013\041" +
    "\014\052\015\051\016\043\040\071\047\046\050\042\051" +
    "\045\052\050\001\002\000\054\010\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\025\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000" +
    "\026\012\047\013\041\014\052\015\051\016\043\025\073" +
    "\047\046\050\042\051\045\052\050\001\002\000\012\037" +
    "\036\053\035\054\034\055\037\001\002\000\026\012\047" +
    "\013\041\014\052\015\051\016\043\043\075\047\046\050" +
    "\042\051\045\052\050\001\002\000\004\035\061\001\002" +
    "\000\032\002\uffe1\004\uffe1\005\uffe1\007\uffe1\011\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\036\uffe1\053\uffe1" +
    "\001\002\000\006\002\ufffe\036\ufffe\001\002\000\004\042" +
    "\101\001\002\000\004\044\102\001\002\000\032\002\ufff7" +
    "\004\ufff7\005\ufff7\007\ufff7\011\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\036\ufff7\053\ufff7\001\002\000\006" +
    "\027\105\030\104\001\002\000\004\042\110\001\002\000" +
    "\004\042\106\001\002\000\004\044\107\001\002\000\032" +
    "\002\ufff5\004\ufff5\005\ufff5\007\ufff5\011\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\036\ufff5\053\ufff5\001\002" +
    "\000\004\044\111\001\002\000\032\002\ufff4\004\ufff4\005" +
    "\ufff4\007\ufff4\011\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\036\ufff4\053\ufff4\001\002\000\004\002\001\001" +
    "\002\000\014\006\114\037\036\053\035\054\034\055\037" +
    "\001\002\000\012\037\036\053\035\054\034\055\037\001" +
    "\002\000\026\012\047\013\041\014\052\015\051\016\043" +
    "\042\116\047\046\050\042\051\045\052\050\001\002\000" +
    "\004\044\117\001\002\000\032\002\uffeb\004\uffeb\005\uffeb" +
    "\007\uffeb\011\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\036\uffeb\053\uffeb\001\002\000\032\012\047\013\041" +
    "\014\052\015\051\016\043\041\121\042\uffe6\045\123\047" +
    "\046\050\042\051\045\052\050\001\002\000\012\037\036" +
    "\053\035\054\034\055\037\001\002\000\004\042\125\001" +
    "\002\000\004\044\124\001\002\000\032\002\uffe8\004\uffe8" +
    "\005\uffe8\007\uffe8\011\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\036\uffe8\053\uffe8\001\002\000\004\044\126" +
    "\001\002\000\032\002\uffe7\004\uffe7\005\uffe7\007\uffe7\011" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\036\uffe7" +
    "\053\uffe7\001\002\000\030\012\047\013\041\014\052\015" +
    "\051\016\043\041\121\042\uffe6\047\046\050\042\051\045" +
    "\052\050\001\002\000\004\042\uffe5\001\002\000\004\042" +
    "\132\001\002\000\004\044\133\001\002\000\032\002\ufff6" +
    "\004\ufff6\005\ufff6\007\ufff6\011\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\036\ufff6\053\ufff6\001\002\000\026" +
    "\012\047\013\041\014\052\015\051\016\043\042\136\047" +
    "\135\050\042\051\045\052\050\001\002\000\012\037\036" +
    "\053\035\054\034\055\037\001\002\000\004\044\137\001" +
    "\002\000\032\002\uffea\004\uffea\005\uffea\007\uffea\011\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\036\uffea\053" +
    "\uffea\001\002\000\026\012\uffdb\013\uffdb\014\052\015\051" +
    "\016\043\042\uffdb\047\uffdb\050\uffdb\051\045\052\050\001" +
    "\002\000\004\044\142\001\002\000\032\002\uffe9\004\uffe9" +
    "\005\uffe9\007\uffe9\011\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\036\uffe9\053\uffe9\001\002\000\004\037\144" +
    "\001\002\000\014\037\036\040\uffef\053\035\054\034\055" +
    "\037\001\002\000\004\040\uffee\001\002\000\004\040\152" +
    "\001\002\000\030\012\047\013\041\014\052\015\051\016" +
    "\043\040\uffed\041\150\047\046\050\042\051\045\052\050" +
    "\001\002\000\012\037\036\053\035\054\034\055\037\001" +
    "\002\000\004\040\uffec\001\002\000\004\042\153\001\002" +
    "\000\004\044\154\001\002\000\032\002\ufff0\004\ufff0\005" +
    "\ufff0\007\ufff0\011\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\036\ufff0\053\ufff0\001\002\000\006\037\156\042" +
    "\157\001\002\000\014\037\036\040\uffef\053\035\054\034" +
    "\055\037\001\002\000\004\044\160\001\002\000\032\002" +
    "\ufff1\004\ufff1\005\ufff1\007\ufff1\011\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\036\ufff1\053\ufff1\001\002\000" +
    "\004\040\162\001\002\000\004\042\163\001\002\000\004" +
    "\044\164\001\002\000\032\002\ufff2\004\ufff2\005\ufff2\007" +
    "\ufff2\011\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\036\ufff2\053\ufff2\001\002\000\036\012\047\013\041\014" +
    "\052\015\051\016\043\017\171\031\172\032\173\033\170" +
    "\034\166\047\046\050\042\051\045\052\050\001\002\000" +
    "\012\037\uffce\053\uffce\054\uffce\055\uffce\001\002\000\012" +
    "\037\036\053\035\054\034\055\037\001\002\000\012\037" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002\000\012\037\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\001\002\000\012\037\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\001\002\000\012\037\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\001\002\000\030\010\176\012\047\013" +
    "\041\014\052\015\051\016\043\043\175\047\046\050\042" +
    "\051\045\052\050\001\002\000\004\035\061\001\002\000" +
    "\004\043\177\001\002\000\004\035\061\001\002\000\032" +
    "\002\uffe3\004\uffe3\005\uffe3\007\uffe3\011\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\036\uffe3\053\uffe3\001\002" +
    "\000\032\002\uffe4\004\uffe4\005\uffe4\007\uffe4\011\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\036\uffe4\053\uffe4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\024\002\013\003\017\004\004\005\015\006" +
    "\012\007\022\010\021\011\020\012\025\001\001\000\004" +
    "\014\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\017\004\076\005\015\006\012\007\022\010\021\011" +
    "\020\012\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\071\001\001\000\004\014\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\066\001\001\000\004\014\065\001\001\000\004\014\064" +
    "\001\001\000\004\013\061\001\001\000\004\014\057\001" +
    "\001\000\004\014\056\001\001\000\004\014\055\001\001" +
    "\000\004\014\054\001\001\000\004\014\053\001\001\000" +
    "\004\014\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\017\004\062\005\015\006\012" +
    "\007\022\010\021\011\020\012\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\073\001\001" +
    "\000\002\001\001\000\004\013\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\114\001\001\000\004\014\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\121\001" +
    "\001\000\004\014\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\146\015\144\017\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\146\015\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\146\015\144\017\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\166\001\001\000\002\001\001\000\004\014\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\200\001" +
    "\001\000\002\001\001\000\004\013\177\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Variable pública para que Principal.java pueda inyectar el JTextArea
    public JTextArea salidaArea; 

    public void setSalida(JTextArea area) {
        this.salidaArea = area;
    }

    public void syntax_error(Symbol s) {
        if (salidaArea != null) {
            salidaArea.append("\n>>> ERROR SINTÁCTICO <<<\n");
            salidaArea.append("Token inesperado: " + (s.value != null ? s.value : "Símbolo") + 
                              " (Línea: " + (s.left + 1) + ", Columna: " + (s.right + 1) + ")\n");
        } else {
            System.err.println("Error sintáctico: Token inesperado " + s.value + " en línea " + (s.left + 1));
        }
    }
    
    public void unrecovered_syntax_error(Symbol s) {
        report_error("Error sintáctico irrecuperable", s);
    }

    
    public void report_error(String message, Object info) {
    if (salidaArea != null) {
        Symbol s = (Symbol)info;
        
        salidaArea.setText(">>> ERROR SINTÁCTICO detectado: " + message + 
                           "\n\tLínea: " + (s.left + 1) + 
                           ", Columna: " + s.right + 
                           " cerca de: " + (s.value == null ? "EOF" : s.value.toString()));
    }
}
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comparador ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comparador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparador ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparador ::= PROTEGO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion SECTUMSEMPRA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion ACCIODIVISIO expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion WINGARDIUM expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion KEDAVRA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion AVADA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= PARENIZQ expresion PARENDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ciclo ::= IMPERIO ID IN expresion DOSPUNTOS bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ciclo ::= IMPERIO ID ASIGN expresion HASTA expresion DOSPUNTOS bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque ::= LLAVEIZQ sentencias LLAVEDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicional ::= CRUCIO expresion comparador expresion CONFUNDO DOSPUNTOS bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicional ::= CRUCIO expresion comparador expresion DOSPUNTOS bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mas_lectura ::= COMA expresion mas_lectura 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_lectura",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mas_lectura ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mas_lectura",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lectura ::= ID ASIGN ACCIO expresion mas_lectura PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lectura",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lectura ::= ID ASIGN ACCIO expresion SEMI HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lectura",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // impresion ::= LUMUS expresion MAS expresion PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // impresion ::= LUMUS expresion PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= ID ASIGN expresion PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= expresion COMA parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opt_params ::= parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_params",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opt_params ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_params",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= BESTIA ID PARENIZQ opt_params PARENDER PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= PORTUS ID PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= PORTUS ID PARENIZQ opt_params PARENDER PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= EXPULSO PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= RICTUSEMPRA ID MINUSMINUS PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= RICTUSEMPRA ID PLUSPLUS PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= OBLIVIATE ID PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= EXPELIARMUS ID PUNTOCOMA HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= ciclo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= lectura 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= impresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= sentencias 
            {
              Object RESULT =null;
		 
                if (parser.salidaArea != null && parser.salidaArea.getText().isEmpty()) { 
                    parser.salidaArea.append("\nAnálisis realizado correctamente\n"); 
                } 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

